TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
    def __init__(self,filename,create):
        # globals
        mycontext['debug'] = False
        mycontext['lock'] = createlock()
        # local (per object) reference to the underlying file
        self.Afn = filename+'.a'
        self.Bfn = filename+'.b'
        # make the files and add 'SE' to the readat file...
        if create:
            if self.Afn in listfiles():
                self.Afile = openfile(self.Afn,create)
                self.Bfile = openfile(self.Bfn,False)
            else:
                self.Afile = openfile(self.Afn,True)
                self.Bfile = openfile(self.Bfn,True)
                self.Afile.writeat('SE',0)
        else:
            if self.Afn in listfiles():
                self.Afile = openfile(self.Afn,False)
                self.Bfile = openfile(self.Bfn,False)
            else:
                pass

    def writeat(self,data,offset):
        # Write the requested data to the B file using the sandbox's writeat call
        mycontext['lock'].acquire(True)
        try:
            self.Bfile.writeat(data, offset)
            mycontext['lock'].release()

        except:
            mycontext['lock'].release()
            return

    def readat(self,bytes,offset):
        # Read from the A file using the sandbox's readat...
        #log(self.Afile.readat(None,0))
        try:
            return self.Afile.readat(bytes, offset)
        except:
            return ""

    def close(self):
        mycontext['lock'].acquire(True)
        try:
	    written_data = [i for i in self.Bfile.readat(None, 0)]
            if (ord(written_data[0]) == 83 and ord(written_data[-1]) == 69):
		data = "".join(written_data)
                self.Afile.close()
                removefile(self.Afn)
                self.Afile = openfile(self.Afn, True)
		self.Afile.writeat(data,0)
                mycontext['lock'].release()
        except:
            mycontext['lock'].release()
            pass
        
        self.Afile.close()
        self.Bfile.close()
        removefile(self.Bfn)

def ABopenfile(filename, create):
    return ABFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
            "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
            "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
            "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
            }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
